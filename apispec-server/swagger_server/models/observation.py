# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Observation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, phenomenontime_begin: int=None, phenomenontime_end: int=None, resulttime: int=None, result: str=None, resultquality: str=None, validtime_begin: int=None, validtime_end: int=None, parameters: str=None, datastream_id: int=None, featureofintrest_link: str=None):  # noqa: E501
        """Observation - a model defined in Swagger

        :param phenomenontime_begin: The phenomenontime_begin of this Observation.  # noqa: E501
        :type phenomenontime_begin: int
        :param phenomenontime_end: The phenomenontime_end of this Observation.  # noqa: E501
        :type phenomenontime_end: int
        :param resulttime: The resulttime of this Observation.  # noqa: E501
        :type resulttime: int
        :param result: The result of this Observation.  # noqa: E501
        :type result: str
        :param resultquality: The resultquality of this Observation.  # noqa: E501
        :type resultquality: str
        :param validtime_begin: The validtime_begin of this Observation.  # noqa: E501
        :type validtime_begin: int
        :param validtime_end: The validtime_end of this Observation.  # noqa: E501
        :type validtime_end: int
        :param parameters: The parameters of this Observation.  # noqa: E501
        :type parameters: str
        :param datastream_id: The datastream_id of this Observation.  # noqa: E501
        :type datastream_id: int
        :param featureofintrest_link: The featureofintrest_link of this Observation.  # noqa: E501
        :type featureofintrest_link: str
        """
        self.swagger_types = {
            'phenomenontime_begin': int,
            'phenomenontime_end': int,
            'resulttime': int,
            'result': str,
            'resultquality': str,
            'validtime_begin': int,
            'validtime_end': int,
            'parameters': str,
            'datastream_id': int,
            'featureofintrest_link': str
        }

        self.attribute_map = {
            'phenomenontime_begin': 'phenomenontime_begin',
            'phenomenontime_end': 'phenomenontime_end',
            'resulttime': 'resulttime',
            'result': 'result',
            'resultquality': 'resultquality',
            'validtime_begin': 'validtime_begin',
            'validtime_end': 'validtime_end',
            'parameters': 'parameters',
            'datastream_id': 'datastream_id',
            'featureofintrest_link': 'featureofintrest_link'
        }

        self._phenomenontime_begin = phenomenontime_begin
        self._phenomenontime_end = phenomenontime_end
        self._resulttime = resulttime
        self._result = result
        self._resultquality = resultquality
        self._validtime_begin = validtime_begin
        self._validtime_end = validtime_end
        self._parameters = parameters
        self._datastream_id = datastream_id
        self._featureofintrest_link = featureofintrest_link

    @classmethod
    def from_dict(cls, dikt) -> 'Observation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The observation of this Observation.  # noqa: E501
        :rtype: Observation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def phenomenontime_begin(self) -> int:
        """Gets the phenomenontime_begin of this Observation.


        :return: The phenomenontime_begin of this Observation.
        :rtype: int
        """
        return self._phenomenontime_begin

    @phenomenontime_begin.setter
    def phenomenontime_begin(self, phenomenontime_begin: int):
        """Sets the phenomenontime_begin of this Observation.


        :param phenomenontime_begin: The phenomenontime_begin of this Observation.
        :type phenomenontime_begin: int
        """
        if phenomenontime_begin is None:
            raise ValueError("Invalid value for `phenomenontime_begin`, must not be `None`")  # noqa: E501

        self._phenomenontime_begin = phenomenontime_begin

    @property
    def phenomenontime_end(self) -> int:
        """Gets the phenomenontime_end of this Observation.


        :return: The phenomenontime_end of this Observation.
        :rtype: int
        """
        return self._phenomenontime_end

    @phenomenontime_end.setter
    def phenomenontime_end(self, phenomenontime_end: int):
        """Sets the phenomenontime_end of this Observation.


        :param phenomenontime_end: The phenomenontime_end of this Observation.
        :type phenomenontime_end: int
        """
        if phenomenontime_end is None:
            raise ValueError("Invalid value for `phenomenontime_end`, must not be `None`")  # noqa: E501

        self._phenomenontime_end = phenomenontime_end

    @property
    def resulttime(self) -> int:
        """Gets the resulttime of this Observation.


        :return: The resulttime of this Observation.
        :rtype: int
        """
        return self._resulttime

    @resulttime.setter
    def resulttime(self, resulttime: int):
        """Sets the resulttime of this Observation.


        :param resulttime: The resulttime of this Observation.
        :type resulttime: int
        """
        if resulttime is None:
            raise ValueError("Invalid value for `resulttime`, must not be `None`")  # noqa: E501

        self._resulttime = resulttime

    @property
    def result(self) -> str:
        """Gets the result of this Observation.


        :return: The result of this Observation.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result: str):
        """Sets the result of this Observation.


        :param result: The result of this Observation.
        :type result: str
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501

        self._result = result

    @property
    def resultquality(self) -> str:
        """Gets the resultquality of this Observation.


        :return: The resultquality of this Observation.
        :rtype: str
        """
        return self._resultquality

    @resultquality.setter
    def resultquality(self, resultquality: str):
        """Sets the resultquality of this Observation.


        :param resultquality: The resultquality of this Observation.
        :type resultquality: str
        """
        if resultquality is None:
            raise ValueError("Invalid value for `resultquality`, must not be `None`")  # noqa: E501

        self._resultquality = resultquality

    @property
    def validtime_begin(self) -> int:
        """Gets the validtime_begin of this Observation.


        :return: The validtime_begin of this Observation.
        :rtype: int
        """
        return self._validtime_begin

    @validtime_begin.setter
    def validtime_begin(self, validtime_begin: int):
        """Sets the validtime_begin of this Observation.


        :param validtime_begin: The validtime_begin of this Observation.
        :type validtime_begin: int
        """
        if validtime_begin is None:
            raise ValueError("Invalid value for `validtime_begin`, must not be `None`")  # noqa: E501

        self._validtime_begin = validtime_begin

    @property
    def validtime_end(self) -> int:
        """Gets the validtime_end of this Observation.


        :return: The validtime_end of this Observation.
        :rtype: int
        """
        return self._validtime_end

    @validtime_end.setter
    def validtime_end(self, validtime_end: int):
        """Sets the validtime_end of this Observation.


        :param validtime_end: The validtime_end of this Observation.
        :type validtime_end: int
        """
        if validtime_end is None:
            raise ValueError("Invalid value for `validtime_end`, must not be `None`")  # noqa: E501

        self._validtime_end = validtime_end

    @property
    def parameters(self) -> str:
        """Gets the parameters of this Observation.


        :return: The parameters of this Observation.
        :rtype: str
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: str):
        """Sets the parameters of this Observation.


        :param parameters: The parameters of this Observation.
        :type parameters: str
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")  # noqa: E501

        self._parameters = parameters

    @property
    def datastream_id(self) -> int:
        """Gets the datastream_id of this Observation.


        :return: The datastream_id of this Observation.
        :rtype: int
        """
        return self._datastream_id

    @datastream_id.setter
    def datastream_id(self, datastream_id: int):
        """Sets the datastream_id of this Observation.


        :param datastream_id: The datastream_id of this Observation.
        :type datastream_id: int
        """
        if datastream_id is None:
            raise ValueError("Invalid value for `datastream_id`, must not be `None`")  # noqa: E501

        self._datastream_id = datastream_id

    @property
    def featureofintrest_link(self) -> str:
        """Gets the featureofintrest_link of this Observation.


        :return: The featureofintrest_link of this Observation.
        :rtype: str
        """
        return self._featureofintrest_link

    @featureofintrest_link.setter
    def featureofintrest_link(self, featureofintrest_link: str):
        """Sets the featureofintrest_link of this Observation.


        :param featureofintrest_link: The featureofintrest_link of this Observation.
        :type featureofintrest_link: str
        """
        if featureofintrest_link is None:
            raise ValueError("Invalid value for `featureofintrest_link`, must not be `None`")  # noqa: E501

        self._featureofintrest_link = featureofintrest_link
