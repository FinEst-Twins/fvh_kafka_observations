# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ObservationData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, topic: str=None, observation: Observation=None):  # noqa: E501
        """ObservationData - a model defined in Swagger

        :param topic: The topic of this ObservationData.  # noqa: E501
        :type topic: str
        :param observation: The observation of this ObservationData.  # noqa: E501
        :type observation: Observation
        """
        self.swagger_types = {
            'topic': str,
            'observation': Observation
        }

        self.attribute_map = {
            'topic': 'topic',
            'observation': 'observation'
        }

        self._topic = topic
        self._observation = observation

    @classmethod
    def from_dict(cls, dikt) -> 'ObservationData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The observation-data of this ObservationData.  # noqa: E501
        :rtype: ObservationData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def topic(self) -> str:
        """Gets the topic of this ObservationData.


        :return: The topic of this ObservationData.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic: str):
        """Sets the topic of this ObservationData.


        :param topic: The topic of this ObservationData.
        :type topic: str
        """
        if topic is None:
            raise ValueError("Invalid value for `topic`, must not be `None`")  # noqa: E501

        self._topic = topic

    @property
    def observation(self) -> Observation:
        """Gets the observation of this ObservationData.


        :return: The observation of this ObservationData.
        :rtype: Observation
        """
        return self._observation

    @observation.setter
    def observation(self, observation: Observation):
        """Sets the observation of this ObservationData.


        :param observation: The observation of this ObservationData.
        :type observation: Observation
        """

        self._observation = observation
